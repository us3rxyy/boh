const express = require('express');
const fetch = require('node-fetch');
const qs = require('querystring');
const fs = require('fs');
require('dotenv').config();

const app = express();
const PORT = 3000;

// Prendi i dati dal .env
const CLIENT_ID = process.env.CLIENT_ID;
const CLIENT_SECRET = process.env.CLIENT_SECRET;
const REDIRECT_URI = process.env.REDIRECT_URI;

// Crea la cartella tokens se non esiste
if (!fs.existsSync('tokens')) {
  fs.mkdirSync('tokens');
}

// ROUTE: /login → reindirizza a Spotify per fare il login
app.get('/login', (req, res) => {
  const scope = 'user-read-currently-playing';
  const query = qs.stringify({
    response_type: 'code',
    client_id: CLIENT_ID,
    scope: scope,
    redirect_uri: REDIRECT_URI
  });
  res.redirect('https://accounts.spotify.com/authorize?' + query);
});

// ROUTE: /callback → riceve il codice da Spotify, ottiene token e salva
app.get('/callback', async (req, res) => {
  const code = req.query.code;

  const body = qs.stringify({
    grant_type: 'authorization_code',
    code: code,
    redirect_uri: REDIRECT_URI
  });

  const response = await fetch('https://accounts.spotify.com/api/token', {
    method: 'POST',
    headers: {
      'Authorization': 'Basic ' + Buffer.from(`${CLIENT_ID}:${CLIENT_SECRET}`).toString('base64'),
      'Content-Type': 'application/x-www-form-urlencoded'
    },
    body: body
  });

  const data = await response.json();

  if (data.error) {
    return res.send('Errore nel login Spotify: ' + JSON.stringify(data));
  }

  const tokens = {
    access_token: data.access_token,
    refresh_token: data.refresh_token,
    expires_in: data.expires_in,
    timestamp: Date.now()
  };

  // Salva i token con un file tipo tokens/spotify_123456.json
  const fileName = `tokens/spotify_${Date.now()}.json`;
  fs.writeFileSync(fileName, JSON.stringify(tokens, null, 2));

  res.send('✅ Accesso effettuato! I token sono stati salvati.');
});

// ROUTE: /test → mostra i token salvati (per debug)
app.get('/test', (req, res) => {
  const files = fs.readdirSync('tokens');
  if (files.length === 0) return res.send('Nessun token salvato ancora.');
  const lastFile = files.sort().reverse()[0];
  const tokenData = fs.readFileSync('tokens/' + lastFile);
  res.setHeader('Content-Type', 'application/json');
  res.send(tokenData);
});

// Avvia il server
app.listen(PORT, () => {
  console.log(`✅ Server attivo su http://localhost:${PORT}`);
});
